<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace Metasequoia
{
<#
var path = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), "..", "..", "mqsdk", "MQPlugin.h");
var enc = Encoding.GetEncoding(932);
var regex = new Regex(@"\#define MQ(?<name>[A-Z0-9_]+)\s+(?<value>(?:0x)?[0-9]+)", RegexOptions.Compiled);
var enums = regex.Matches(File.ReadAllText(path, enc).Replace("\r\n", "\n"))
				 .Cast<Match>()
				 .Select(_ =>
				 {
					 var name = _.Groups["name"].Value
						 .ToLower()
						 .Replace("obj_id", "objId")
						 .Replace("mat_id", "matId")
						 .Replace("file_type", "fileType")
						 .Replace("object_lathe_x", "object_lathe_axis_x")
						 .Replace("object_lathe_y", "object_lathe_axis_y")
						 .Replace("object_lathe_z", "object_lathe_axis_z")
						 .Replace("point_light", "pointLight")
						 .Replace("directional_light", "directionalLight");
					 var idx = name.StartsWith("plugin_type") || name.StartsWith("object_") || name.StartsWith("material_")
						 ? name.LastIndexOf('_')
						 : name.IndexOf('_');
					 
					 return Tuple.Create
					 (
						 Capitalize(name.Substring(0, idx)),
						 Capitalize(name.Substring(idx + 1)),
						 _.Groups["value"].Value,
						 _.Groups["name"].Value
					 );
				 });

foreach (var k in enums.GroupBy(_ => _.Item1))
{
	var name = k.Key;
	var isFlags = false;
		
	switch (name)
	{
		case "Object":
		case "Scene":
		case "Matrix":
			name = "MQ" + name;
				
			break;
		case "ObjectFreeze":
		case "ObjectMirrorAxis":
		case "ObjectLatheAxis":
			isFlags = true;
				
			break;
	}

	if (name == "Plugin")
	{
#>
	partial class Plugin
	{
<#
		foreach (var v in k)
		{
#>
		/// <summary>
		/// MQ<#=v.Item4 #>
		/// </summary>
		public const int <#=v.Item2 #> = <#=v.Item3 #>;
<#
		}
#>
	}

<#
	}
	else
	{
		if (isFlags)
		{
#>
	[Flags]
<#
		}
#>
	public enum <#= name #>
	{
<#
		foreach (var v in k)
		{
#>
		/// <summary>
		/// MQ<#=v.Item4 #>
		/// </summary>
		<#=v.Item2 #> = <#=v.Item3 #>,
<#
		}
#>
	}

<#
	}
}
#>
}

<#+
Regex capitalizeRegex = new Regex(@"(_|^)([a-z0-9])", RegexOptions.Compiled);

string Capitalize(string s)
{
	return capitalizeRegex.Replace(s, m => m.Groups[2].Value.ToUpper());
}
#>